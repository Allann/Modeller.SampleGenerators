using Hy.Modeller.Domain;
using Hy.Modeller.Domain.Extensions;
using Hy.Modeller.Generator;
using Hy.Modeller.Interfaces;
using System;
using System.Linq;
using System.Text;

namespace NetCore3Solution
{
    public class Generator : IGenerator
    {
        private readonly Module _module;

        public Generator(ISettings settings, Module module)
        {
            Settings = settings ?? throw new ArgumentNullException(nameof(settings));
            _module = module ?? throw new ArgumentNullException(nameof(module));
        }

        public ISettings Settings { get; }

        public IOutput Create()
        {
            var solution = (ISolution)new Solution(_module.Namespace);
            solution.AddFile(new File("generateSettings.json", Settings.ToJson()));
            solution.AddFile(new File("model.json", _module.ToJson()));

            solution.AddProject((IProject)new ContractProject.Generator(Settings, _module).Create());

            solution.AddFile(GitIgnore());
            solution.AddFile(GetSolutionFile(solution));

            return solution;
        }

        private IFile GitIgnore()
        {
            var sb = new StringBuilder();
            sb.b();
            sb.b();
            sb.al("## Ignore Visual Studio temporary files, build results, and");
            sb.al("## files generated by popular Visual Studio add-ons.");
            sb.al("##");
            sb.al("## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore");
            sb.b();
            sb.al("# User-specific files");
            sb.al("*.suo");
            sb.al("*.user");
            sb.al("*.userosscache");
            sb.al("*.sln.docstates");
            sb.b();
            sb.al("# User-specific files (MonoDevelop/Xamarin Studio)");
            sb.al("*.userprefs");
            sb.b();
            sb.al("# Build results");
            sb.al("[Dd]ebug/");
            sb.al("[Dd]ebugPublic/");
            sb.al("[Rr]elease/");
            sb.al("[Rr]eleases/");
            sb.al("x64/");
            sb.al("x86/");
            sb.al("bld/");
            sb.al("[Bb]in/");
            sb.al("[Oo]bj/");
            sb.al("[Ll]og/");
            sb.b();
            sb.al("# Visual Studio 2015/2017 cache/options directory");
            sb.al(".vs/");
            sb.al("# Uncomment if you have tasks that create the project's static files in wwwroot");
            sb.al("#wwwroot/");
            sb.b();
            sb.al("# Visual Studio 2017 auto generated files");
            sb.al("Generated\\ Files/");
            sb.b();
            sb.al("# MSTest test Results");
            sb.al("[Tt]est[Rr]esult*/");
            sb.al("[Bb]uild[Ll]og.*");
            sb.b();
            sb.al("# NUNIT");
            sb.al("*.VisualState.xml");
            sb.al("TestResult.xml");
            sb.b();
            sb.al("# Build Results of an ATL Project");
            sb.al("[Dd]ebugPS/");
            sb.al("[Rr]eleasePS/");
            sb.al("dlldata.c");
            sb.b();
            sb.al("# Benchmark Results");
            sb.al("BenchmarkDotNet.Artifacts/");
            sb.b();
            sb.al("# .NET Core");
            sb.al("project.lock.json");
            sb.al("project.fragment.lock.json");
            sb.al("artifacts/");
            sb.b();
            sb.al("# StyleCop");
            sb.al("StyleCopReport.xml");
            sb.b();
            sb.al("# Files built by Visual Studio");
            sb.al("*_i.c");
            sb.al("*_p.c");
            sb.al("*_h.h");
            sb.al("*.ilk");
            sb.al("*.meta");
            sb.al("*.obj");
            sb.al("*.iobj");
            sb.al("*.pch");
            sb.al("*.pdb");
            sb.al("*.ipdb");
            sb.al("*.pgc");
            sb.al("*.pgd");
            sb.al("*.rsp");
            sb.al("*.sbr");
            sb.al("*.tlb");
            sb.al("*.tli");
            sb.al("*.tlh");
            sb.al("*.tmp");
            sb.al("*.tmp_proj");
            sb.al("*.log");
            sb.al("*.vspscc");
            sb.al("*.vssscc");
            sb.al(".builds");
            sb.al("*.pidb");
            sb.al("*.svclog");
            sb.al("*.scc");
            sb.b();
            sb.al("# Chutzpah Test files");
            sb.al("_Chutzpah*");
            sb.b();
            sb.al("# Visual C++ cache files");
            sb.al("ipch/");
            sb.al("*.aps");
            sb.al("*.ncb");
            sb.al("*.opendb");
            sb.al("*.opensdf");
            sb.al("*.sdf");
            sb.al("*.cachefile");
            sb.al("*.VC.db");
            sb.al("*.VC.VC.opendb");
            sb.b();
            sb.al("# Visual Studio profiler");
            sb.al("*.psess");
            sb.al("*.vsp");
            sb.al("*.vspx");
            sb.al("*.sap");
            sb.b();
            sb.al("# Visual Studio Trace Files");
            sb.al("*.e2e");
            sb.b();
            sb.al("# TFS 2012 Local Workspace");
            sb.al("$tf/");
            sb.b();
            sb.al("# Guidance Automation Toolkit");
            sb.al("*.gpState");
            sb.b();
            sb.al("# ReSharper is a .NET coding add-in");
            sb.al("_ReSharper*/");
            sb.al("*.[Rr]e[Ss]harper");
            sb.al("*.DotSettings.user");
            sb.b();
            sb.al("# JustCode is a .NET coding add-in");
            sb.al(".JustCode");
            sb.b();
            sb.al("# TeamCity is a build add-in");
            sb.al("_TeamCity*");
            sb.b();
            sb.al("# DotCover is a Code Coverage Tool");
            sb.al("*.dotCover");
            sb.b();
            sb.al("# AxoCover is a Code Coverage Tool");
            sb.al(".axoCover/*");
            sb.al("!.axoCover/settings.json");
            sb.b();
            sb.al("# Visual Studio code coverage results");
            sb.al("*.coverage");
            sb.al("*.coveragexml");
            sb.b();
            sb.al("# NCrunch");
            sb.al("_NCrunch_*");
            sb.al(".*crunch*.local.xml");
            sb.al("nCrunchTemp_*");
            sb.b();
            sb.al("# MightyMoose");
            sb.al("*.mm.*");
            sb.al("AutoTest.Net/");
            sb.b();
            sb.al("# Web workbench (sass)");
            sb.al(".sass-cache/");
            sb.b();
            sb.al("# Installshield output folder");
            sb.al("[Ee]xpress/");
            sb.b();
            sb.al("# DocProject is a documentation generator add-in");
            sb.al("DocProject/buildhelp/");
            sb.al("DocProject/Help/*.HxT");
            sb.al("DocProject/Help/*.HxC");
            sb.al("DocProject/Help/*.hhc");
            sb.al("DocProject/Help/*.hhk");
            sb.al("DocProject/Help/*.hhp");
            sb.al("DocProject/Help/Html2");
            sb.al("DocProject/Help/html");
            sb.b();
            sb.al("# Click-Once directory");
            sb.al("publish/");
            sb.b();
            sb.al("# Publish Web Output");
            sb.al("*.[Pp]ublish.xml");
            sb.al("*.azurePubxml");
            sb.al("# Note: Comment the next line if you want to checkin your web deploy settings,");
            sb.al("# but database connection strings (with potential passwords) will be unencrypted");
            sb.al("*.pubxml");
            sb.al("*.publishproj");
            sb.b();
            sb.al("# Microsoft Azure Web App publish settings. Comment the next line if you want to");
            sb.al("# checkin your Azure Web App publish settings, but sensitive information contained");
            sb.al("# in these scripts will be unencrypted");
            sb.al("PublishScripts/");
            sb.b();
            sb.al("# NuGet Packages");
            sb.al("*.nupkg");
            sb.al("# The packages folder can be ignored because of Package Restore");
            sb.al("**/[Pp]ackages/*");
            sb.al("# except build/, which is used as an MSBuild target.");
            sb.al("!**/[Pp]ackages/build/");
            sb.al("# Uncomment if necessary however generally it will be regenerated when needed");
            sb.al("#!**/[Pp]ackages/repositories.config");
            sb.al("# NuGet v3's project.json files produces more ignorable files");
            sb.al("*.nuget.props");
            sb.al("*.nuget.targets");
            sb.b();
            sb.al("# Microsoft Azure Build Output");
            sb.al("csx/");
            sb.al("*.build.csdef");
            sb.b();
            sb.al("# Microsoft Azure Emulator");
            sb.al("ecf/");
            sb.al("rcf/");
            sb.b();
            sb.al("# Windows Store app package directories and files");
            sb.al("AppPackages/");
            sb.al("BundleArtifacts/");
            sb.al("Package.StoreAssociation.xml");
            sb.al("_pkginfo.txt");
            sb.al("*.appx");
            sb.b();
            sb.al("# Visual Studio cache files");
            sb.al("# files ending in .cache can be ignored");
            sb.al("*.[Cc]ache");
            sb.al("# but keep track of directories ending in .cache");
            sb.al("!*.[Cc]ache/");
            sb.b();
            sb.al("# Others");
            sb.al("ClientBin/");
            sb.al("~$*");
            sb.al("*~");
            sb.al("*.dbmdl");
            sb.al("*.dbproj.schemaview");
            sb.al("*.jfm");
            sb.al("*.pfx");
            sb.al("*.publishsettings");
            sb.al("orleans.codegen.cs");
            sb.b();
            sb.al("# Including strong name files can present a security risk");
            sb.al("# (https://github.com/github/gitignore/pull/2483#issue-259490424)");
            sb.al("#*.snk");
            sb.b();
            sb.al("# Since there are multiple workflows, uncomment next line to ignore bower_components");
            sb.al("# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)");
            sb.al("#bower_components/");
            sb.b();
            sb.al("# RIA/Silverlight projects");
            sb.al("Generated_Code/");
            sb.b();
            sb.al("# Backup & report files from converting an old project file");
            sb.al("# to a newer Visual Studio version. Backup files are not needed,");
            sb.al("# because we have git ;-)");
            sb.al("_UpgradeReport_Files/");
            sb.al("Backup*/");
            sb.al("UpgradeLog*.XML");
            sb.al("UpgradeLog*.htm");
            sb.al("ServiceFabricBackup/");
            sb.al("*.rptproj.bak");
            sb.b();
            sb.al("# SQL Server files");
            sb.al("*.mdf");
            sb.al("*.ldf");
            sb.al("*.ndf");
            sb.b();
            sb.al("# Business Intelligence projects");
            sb.al("*.rdl.data");
            sb.al("*.bim.layout");
            sb.al("*.bim_*.settings");
            sb.al("*.rptproj.rsuser");
            sb.b();
            sb.al("# Microsoft Fakes");
            sb.al("FakesAssemblies/");
            sb.b();
            sb.al("# GhostDoc plugin setting file");
            sb.al("*.GhostDoc.xml");
            sb.b();
            sb.al("# Node.js Tools for Visual Studio");
            sb.al(".ntvs_analysis.dat");
            sb.al("node_modules/");
            sb.b();
            sb.al("# Visual Studio 6 build log");
            sb.al("*.plg");
            sb.b();
            sb.al("# Visual Studio 6 workspace options file");
            sb.al("*.opt");
            sb.b();
            sb.al("# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)");
            sb.al("*.vbw");
            sb.b();
            sb.al("# Visual Studio LightSwitch build output");
            sb.al("**/*.HTMLClient/GeneratedArtifacts");
            sb.al("**/*.DesktopClient/GeneratedArtifacts");
            sb.al("**/*.DesktopClient/ModelManifest.xml");
            sb.al("**/*.Server/GeneratedArtifacts");
            sb.al("**/*.Server/ModelManifest.xml");
            sb.al("_Pvt_Extensions");
            sb.b();
            sb.al("# Paket dependency manager");
            sb.al(".paket/paket.exe");
            sb.al("paket-files/");
            sb.b();
            sb.al("# FAKE - F# Make");
            sb.al(".fake/");
            sb.b();
            sb.al("# JetBrains Rider");
            sb.al(".idea/");
            sb.al("*.sln.iml");
            sb.b();
            sb.al("# CodeRush");
            sb.al(".cr/");
            sb.b();
            sb.al("# Python Tools for Visual Studio (PTVS)");
            sb.al("__pycache__/");
            sb.al("*.pyc");
            sb.b();
            sb.al("# Cake - Uncomment if you are using it");
            sb.al("# tools/**");
            sb.al("# !tools/packages.config");
            sb.b();
            sb.al("# Tabs Studio");
            sb.al("*.tss");
            sb.b();
            sb.al("# Telerik's JustMock configuration file");
            sb.al("*.jmconfig");
            sb.b();
            sb.al("# BizTalk build output");
            sb.al("*.btp.cs");
            sb.al("*.btm.cs");
            sb.al("*.odx.cs");
            sb.al("*.xsd.cs");
            sb.b();
            sb.al("# OpenCover UI analysis results");
            sb.al("OpenCover/");
            sb.b();
            sb.al("# Azure Stream Analytics local run output");
            sb.al("ASALocalRun/");
            sb.b();
            sb.al("# MSBuild Binary and Structured Log");
            sb.al("*.binlog");
            sb.b();
            sb.al("# NVidia Nsight GPU debugger configuration file");
            sb.al("*.nvuser");
            sb.b();
            sb.al("# MFractors (Xamarin productivity tool) working folder");
            sb.al(".mfractor/");
            sb.b();
            sb.al("# Local History for Visual Studio");
            sb.al(".localhistory/");

            return new File(".gitignore", sb.ToString());
        }

        private File GetSolutionFile(ISolution solution)
        {
            var sb = new StringBuilder();
            sb.al("Microsoft Visual Studio Solution File, Format Version 12.00");
            sb.al("# Visual Studio Version 16");
            sb.al("VisualStudioVersion = 16.0.29521.150");
            sb.al("MinimumVisualStudioVersion = 10.0.40219.1");

            foreach (var project in solution.Projects)
            {
                sb.AppendLine($"Project(\"{{9A19103F-16F7-4668-BE54-9A1E7A4F7556}}\") = \"{project.Name}\", \"{project.Path}\\{project.Name}.csproj\", \"{{{project.Id}}}\"");
                sb.al("EndProject");
            }

            sb.al("Global");
            sb.i(1, 2).al("GlobalSection(SolutionConfigurationPlatforms) = preSolution");
            sb.i(2, 2).al("Debug|Any CPU = Debug|Any CPU");
            sb.i(2, 2).al("Release|Any CPU = Release|Any CPU");
            sb.i(1, 2).al("EndGlobalSection");
            sb.i(1, 2).al("GlobalSection(ProjectConfigurationPlatforms) = postSolution");
            foreach (var project in solution.Projects.Cast<IProject>())
            {
                sb.i(2, 2).al($"{{{project.Id}}}.Debug|Any CPU.ActiveCfg = Debug|Any CPU");
                sb.i(2, 2).al($"{{{project.Id}}}.Debug|Any CPU.Build.0 = Debug|Any CPU");
                sb.i(2, 2).al($"{{{project.Id}}}.Release|Any CPU.ActiveCfg = Release|Any CPU");
                sb.i(2, 2).al($"{{{project.Id}}}.Release|Any CPU.Build.0 = Release|Any CPU");
            }
            sb.i(1, 2).al("EndGlobalSection");
            sb.i(1, 2).al("GlobalSection(SolutionProperties) = preSolution");
            sb.i(2, 2).al("HideSolutionNode = FALSE");
            sb.i(1, 2).al("EndGlobalSection");
            sb.i(1, 2).al("GlobalSection(ExtensibilityGlobals) = postSolution");
            sb.i(2, 2).al($"SolutionGuid = {{{Guid.NewGuid()}}}");
            sb.i(1, 2).al("EndGlobalSection");
            sb.al("EndGlobal");

            return new File(_module.Namespace + ".sln", sb.ToString());
        }
    }
}
